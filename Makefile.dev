BUILD_MAJOR ?= 0
BUILD_MINOR ?= 0
BUILD_PATCH ?= 0
BUILD_NUMBER ?= local.$(shell git rev-parse --short HEAD).$(shell date +%s)

JFROG_USER_EMAIL ?=
JFROG_API_KEY ?=

AMAAS_GO_MODULE_VERSION_ID ?= $(BUILD_MAJOR).$(BUILD_MINOR).$(BUILD_PATCH)-$(BUILD_NUMBER)


JFROG_GO_REGISTRY_PREFIX ?= https://jfrog.trendmicro.com/artifactory
REGISTRY_ALL_AMAAS_GO_SUBDIR ?= amaas-go-all
REGISTRY_LOCAL_AMAAS_GO_SUBDIR ?= amaas-go-local


IMAGE_NAME := amaas/amaas-go-client-sdk:latest


# All the variables defined above are only necessary when invoking the docker-publish target.
# If not publishing to JFrog, for Golang SDK, we'll just be mapping github.com/trendmicro/amaas
# to the local path representing the root directory of the Golang SDK in the local repo.

# go.mod redirection stuff
PWD := $(shell pwd)


all: clean test


docker-publish:
	cp ../../protos/scan.proto ./
	docker build \
		-t $(IMAGE_NAME) \
		--build-arg JFROG_USER_EMAIL=$(JFROG_USER_EMAIL) \
		--build-arg JFROG_API_KEY=$(JFROG_API_KEY) \
		--build-arg JFROG_GO_REGISTRY_PREFIX=$(JFROG_GO_REGISTRY_PREFIX) \
		--build-arg REGISTRY_ALL_AMAAS_GO_SUBDIR=$(REGISTRY_ALL_AMAAS_GO_SUBDIR) \
		--build-arg REGISTRY_LOCAL_AMAAS_GO_SUBDIR=$(REGISTRY_LOCAL_AMAAS_GO_SUBDIR) \
		--build-arg AMAAS_GO_MODULE_VERSION_ID=$(AMAAS_GO_MODULE_VERSION_ID) \
		.
	rm -f scan.proto


# Invoking the target compile-proto-local requires prior installation of necessary
# protobuf toolchain for Golang

compile-proto:
	mkdir -p ./src/client/base
	protoc --go_out=./src/client/base --go-grpc_out=./src/client/base \
		--go_opt=paths=source_relative --go-grpc_opt=paths=source_relative \
		-I../../protos ../../protos/scan.proto


# Must modify go.mod to point to local modules

build: compile-proto __BACKUP__/go.mod
	(cd src; \
	go mod edit --replace=github.com/trendmicro/amaas=$(PWD)/src && \
	go mod edit --replace=github.com/trendmicro/amaas/client=$(PWD)/src/client && \
	go mod edit --replace=github.com/trendmicro/amaas/client/base=$(PWD)/src/client/base)
	(cd src; go mod tidy; go mod verify)


build-tools: build
	(cd src/tools; go build -o client client.go)
	(cd src/tools; go build -o scanfiles scanfiles.go)


build-tools-with-clientside-archive-handling: __BACKUP__/archive_handling_stub.go build
	cp -f src_archive_handling/archive_handling.go src/client
	rm -f src/client/archive_handling_stub.go
	(cd src/tools; go build -o client client.go)
	(cd src/tools; go build -o scanfiles scanfiles.go)
	cp -f __BACKUP__/archive_handling_stub.go src/client/ 2>/dev/null || :


test: clean build
	mkdir -p ./test
	(cd src/client; \
	export AMAAS_UNIT_TEST_GOLANG_DIR=../../test && \
	go test -v)


__BACKUP__/go.mod:
	mkdir -p __BACKUP__ && cp src/go.mod __BACKUP__


__BACKUP__/archive_handling_stub.go:
	mkdir -p __BACKUP__ && cp src/client/archive_handling_stub.go __BACKUP__


clean:
	cp -f __BACKUP__/go.mod src/ 2>/dev/null || : && cp -f __BACKUP__/archive_handling_stub.go src/client/ 2>/dev/null || : && rm -rf __BACKUP__
	rm -f src/client/archive_handling.go
	rm -rf src/client/base/
	rm -rf test/
	rm -f src/tools/client src/tools/scanfiles
	rm -f ./scan.proto


.PHONY: all docker-publish compile-proto build build-tools test clean
